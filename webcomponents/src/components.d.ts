/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CarPark {
        "areaId": number;
        "carCapacity": number | string;
        "carDroveIn": boolean;
        "endless": boolean;
        "heightArea": number;
        "parkingCars": string;
        "widthArea": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlotArea {
        "heightArea": number;
        "widthArea": number;
    }
    interface SheepPasture {
        "heightArea": number;
        "sizeArea": number;
        "widthArea": number;
    }
    interface TestComponent {
        "name": string;
    }
}
export interface CarParkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarParkElement;
}
export interface TestComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTestComponentElement;
}
declare global {
    interface HTMLCarParkElementEventMap {
        "sendCapacity": Array<string | number | boolean>;
        "sendCarNumb": number;
    }
    interface HTMLCarParkElement extends Components.CarPark, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCarParkElementEventMap>(type: K, listener: (this: HTMLCarParkElement, ev: CarParkCustomEvent<HTMLCarParkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCarParkElementEventMap>(type: K, listener: (this: HTMLCarParkElement, ev: CarParkCustomEvent<HTMLCarParkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCarParkElement: {
        prototype: HTMLCarParkElement;
        new (): HTMLCarParkElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPlotAreaElement extends Components.PlotArea, HTMLStencilElement {
    }
    var HTMLPlotAreaElement: {
        prototype: HTMLPlotAreaElement;
        new (): HTMLPlotAreaElement;
    };
    interface HTMLSheepPastureElement extends Components.SheepPasture, HTMLStencilElement {
    }
    var HTMLSheepPastureElement: {
        prototype: HTMLSheepPastureElement;
        new (): HTMLSheepPastureElement;
    };
    interface HTMLTestComponentElementEventMap {
        "setValue": string;
    }
    interface HTMLTestComponentElement extends Components.TestComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTestComponentElementEventMap>(type: K, listener: (this: HTMLTestComponentElement, ev: TestComponentCustomEvent<HTMLTestComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTestComponentElementEventMap>(type: K, listener: (this: HTMLTestComponentElement, ev: TestComponentCustomEvent<HTMLTestComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTestComponentElement: {
        prototype: HTMLTestComponentElement;
        new (): HTMLTestComponentElement;
    };
    interface HTMLElementTagNameMap {
        "car-park": HTMLCarParkElement;
        "my-component": HTMLMyComponentElement;
        "plot-area": HTMLPlotAreaElement;
        "sheep-pasture": HTMLSheepPastureElement;
        "test-component": HTMLTestComponentElement;
    }
}
declare namespace LocalJSX {
    interface CarPark {
        "areaId"?: number;
        "carCapacity"?: number | string;
        "carDroveIn"?: boolean;
        "endless"?: boolean;
        "heightArea"?: number;
        "onSendCapacity"?: (event: CarParkCustomEvent<Array<string | number | boolean>>) => void;
        "onSendCarNumb"?: (event: CarParkCustomEvent<number>) => void;
        "parkingCars"?: string;
        "widthArea"?: number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlotArea {
        "heightArea"?: number;
        "widthArea"?: number;
    }
    interface SheepPasture {
        "heightArea"?: number;
        "sizeArea"?: number;
        "widthArea"?: number;
    }
    interface TestComponent {
        "name"?: string;
        "onSetValue"?: (event: TestComponentCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "car-park": CarPark;
        "my-component": MyComponent;
        "plot-area": PlotArea;
        "sheep-pasture": SheepPasture;
        "test-component": TestComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "car-park": LocalJSX.CarPark & JSXBase.HTMLAttributes<HTMLCarParkElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "plot-area": LocalJSX.PlotArea & JSXBase.HTMLAttributes<HTMLPlotAreaElement>;
            "sheep-pasture": LocalJSX.SheepPasture & JSXBase.HTMLAttributes<HTMLSheepPastureElement>;
            "test-component": LocalJSX.TestComponent & JSXBase.HTMLAttributes<HTMLTestComponentElement>;
        }
    }
}
